import { loadState, saveState, dollars, daysTo, calcCollateral, fetchQuote, fetchOptionContract, distanceToStrikePct, DEFAULT_ALERTS, bsDelta, getSettings, saveSettings } from './shared.js';
let state = loadState(); const COLUMNS=["Expand","Symbol","Status","Strategy","Side","Quantity","ShortStrike","LongStrike","PremiumReceived","PremiumUnrealized","Expiration","OpenDate","CloseDate","Collateral","Last Stock","Last Option","Delta","IV","Distance %","Alerts","Actions"]; let sort={by:"",dir:"asc"}, autoTimer=null;
const $=(s)=>document.querySelector(s), $$=(s)=>Array.from(document.querySelectorAll(s));
$("#btn-settings").addEventListener('click', openSettings); $("#btn-edit-alerts").addEventListener('click', openSettings);
function openSettings(){ const dlg=$("#settings"), form=$("#settings-form"); const st=getSettings(); form.source.value=st.source||"yahoo"; form.testSymbol.value=st.testSymbol||"AAPL"; const list=$("#alerts-list"); list.innerHTML=""; (state.alerts||DEFAULT_ALERTS).forEach(a=>list.insertAdjacentHTML("beforeend",alertRow(a))); dlg.showModal();
  $("#btn-add-alert").onclick=(e)=>{e.preventDefault(); list.insertAdjacentHTML("beforeend",alertRow({pct:0.2,label:"watch"}));};
  $("#btn-test-conn").onclick=async(e)=>{e.preventDefault(); const sym=form.testSymbol.value||"AAPL"; $("#settings-status").textContent="Testing…"; const q=await fetchQuote(sym); $("#settings-status").textContent=q&&q.price!=null?`OK (${q.source||'source'}): ${sym} ${q.price}`:"Failed (try Yahoo)";};
  $("#btn-settings-save").onclick=()=>{ const entries=Array.from(list.querySelectorAll('.alert-row')).map(row=>({ pct:Number(row.querySelector('.a-pct').value), label:row.querySelector('.a-label').value.trim()||"alert"})).filter(x=>!Number.isNaN(x.pct)); state.alerts=entries; save();
  saveSettings({source:form.source.value,testSymbol:form.testSymbol.value}); $("#badge-source").textContent=`Source: ${form.source.value.toUpperCase()}`; dlg.close(); render(); };}
function alertRow(a){ return `<div class="alert-row flex"><input class="a-pct" type="number" step="0.01" value="${a.pct}"/><input class="a-label" value="${a.label}"/><button class="btn danger" onclick="this.parentElement.remove()">Delete</button></div>`;}
$("#font-range").addEventListener('input', e=>{ document.documentElement.style.setProperty('--fs', e.target.value+'px'); });
$("#file-csv").addEventListener('change', (e)=>{ const file=e.target.files?.[0]; if(!file) return; Papa.parse(file,{header:true,skipEmptyLines:true,complete:(res)=>{ const rows=res.data; state.positions=parsePositionsFromCsv(rows); save(); render(); refreshAll(); }}); });
$("#btn-export").addEventListener('click', ()=>{ const csv=Papa.unparse(state.positions.map(pos=>({Symbol:pos.Symbol,Status:pos.Status,Strategy:pos.Strategy,Side:pos.Side,Quantity:pos.Quantity,ShortStrike:pos.ShortStrike,LongStrike:pos.LongStrike,PremiumReceived:pos.PremiumReceived,PremiumUnrealized:pos.PremiumUnrealized,Expiration:pos.Expiration,OpenDate:pos.OpenDate,CloseDate:pos.CloseDate,CollateralOverride:pos.CollateralOverride,Notes:pos.Notes}))); const blob=new Blob([csv],{type:"text/csv"}); const url=URL.createObjectURL(blob); const a=document.createElement("a"); a.href=url; a.download=`netzero_positions_${Date.now()}.csv`; a.click(); setTimeout(()=>URL.revokeObjectURL(url),1000); });
function parsePositionsFromCsv(rows){ const hasLegs=rows.some(r=>r.PositionId||r.LegType||r.Strike); if(!hasLegs){ return rows.map(r=>({...r, legs:(r.ShortStrike?[{LegType:'Short',Side:r.Side||'Put',Strike:Number(r.ShortStrike),Premium:Number(r.PremiumReceived||0),Qty:Number(r.Quantity||1)}]:[])})); }
  const key=(r)=>r.PositionId||`${r.Symbol}|${r.Expiration}|${r.Strategy}`; const map=new Map(); for(const r of rows){ const k=key(r); (map.get(k)||map.set(k,[]).get(k)).push(r); }
  const positions=[]; for(const [k,list] of map.entries()){ const head=list[0]; const legs=list.map(l=>({LegType:l.LegType||'Short',Side:l.Side||head.Side,Strike:Number(l.Strike),Premium:Number(l.Premium||0),Qty:Number(l.Qty||head.Quantity||1)}));
    const short=legs.find(x=>String(x.LegType).toLowerCase()==='short'); const _long=legs.find(x=>String(x.LegType).toLowerCase()==='long');
    positions.push({Symbol:head.Symbol,Status:head.Status||'Open',Strategy:head.Strategy||'',Side:head.Side||short?.Side||'',Quantity:head.Quantity||short?.Qty||1,ShortStrike:short?.Strike||'',LongStrike:_long?.Strike||'',PremiumReceived:head.PremiumReceived||short?.Premium||'',PremiumUnrealized:head.PremiumUnrealized||'',Expiration:head.Expiration||'',OpenDate:head.OpenDate||'',CloseDate:head.CloseDate||'',CollateralOverride:head.CollateralOverride||'',Notes:head.Notes||'',legs}); }
  return positions; }
$("#btn-add").addEventListener('click', ()=>openEditor()); const editor=$("#editor"), form=$("#editor-form"), title=$("#editor-title"), legsBody=$("#legs-body");
function openEditor(row={}, index=-1){ title.textContent=index>=0?"Edit Position":"Add Position"; for(const el of Array.from(form.elements)){ if(!el.name) continue; el.value=(row[el.name]??""); } legsBody.innerHTML=(Array.isArray(row.legs)?row.legs:[]).map(legRowHtml).join(''); editor.showModal();
  $("#btn-add-leg").onclick=(e)=>{ e.preventDefault(); legsBody.insertAdjacentHTML("beforeend", legRowHtml({LegType:'Short',Side: row.Side||'Put', Strike:'', Premium:'', Qty: row.Quantity||1 })); };
  $("#btn-save").onclick=()=>{ const obj=Object.fromEntries(Array.from(form.elements).filter(e=>e.name).map(e=>[e.name,e.value])); const legs=Array.from(form.querySelectorAll(".leg-row")).map(tr=>({LegType:tr.querySelector('.leg-type').value,Side:tr.querySelector('.leg-side').value,Strike:Number(tr.querySelector('.leg-strike').value),Premium:Number(tr.querySelector('.leg-premium').value),Qty:Number(tr.querySelector('.leg-qty').value||obj.Quantity||1)})).filter(l=>!Number.isNaN(l.Strike)); const pos={...obj,legs}; if(index>=0) state.positions[index]={...state.positions[index],...pos}; else state.positions.push(pos); editor.close(); save(); render(); refreshAll(); };}
function legRowHtml(l){ return `<tr class="leg-row"><td><select class="leg-type"><option ${l.LegType==='Short'?'selected':''}>Short</option><option ${l.LegType==='Long'?'selected':''}>Long</option></select></td><td><select class="leg-side"><option ${String(l.Side).toLowerCase()==='put'?'selected':''}>Put</option><option ${String(l.Side).toLowerCase()==='call'?'selected':''}>Call</option></select></td><td><input class="leg-strike" type="number" step="0.01" value="${l.Strike??''}"/></td><td><input class="leg-premium" type="number" step="0.01" value="${l.Premium??''}"/></td><td><input class="leg-qty" type="number" step="1" value="${l.Qty??1}"/></td><td><button class="btn danger" onclick="this.closest('tr').remove()">X</button></td></tr>`; }
$("#search").addEventListener('input', ()=>render()); $("#filter-status").addEventListener('change', ()=>render());
function sortValue(col,pos,comp){ if(col==="Collateral") return comp.collateral; if(col==="Expiration") return pos.Expiration||""; if(col==="Last Stock") return comp.lastStock??''; if(col==="Last Option") return comp.lastOption??''; if(col==="Delta") return comp.delta??''; if(col==="IV") return comp.iv??''; if(col==="Distance %") return comp.distPct??''; return pos[col]??""; }
function render(){ kpis(); $("#badge-source").textContent=`Source: ${(getSettings().source||'yahoo').toUpperCase()}`; const thead=$("#grid thead"), tbody=$("#grid tbody");
  const heads=COLUMNS.map(h=>`<th data-col="${h}">${h} ${sort.by===h?(sort.dir==='asc'?'▲':'▼'):''}</th>`).join(""); thead.innerHTML=`<tr>${heads}</tr>`;
  $$("#grid th").forEach(th=> th.addEventListener('click', ()=>{ const col=th.dataset.col; if(!col||col==="Actions"||col==="Expand") return; if(sort.by===col){ sort.dir=(sort.dir==='asc'?'desc':'asc'); } else { sort.by=col; sort.dir='asc'; } renderBody(); }));
  renderBody(); }
function kpis(){ const open=state.positions.filter(p=>p.Status==='Open').length, closed=state.positions.filter(p=>p.Status==='Closed').length, rolled=state.positions.filter(p=>p.Status==='Rolled').length; $("#k-open-closed").textContent=`${open} / ${closed} / ${rolled}`;
  const collateral=state.positions.reduce((s,p)=>s+calcCollateral(p),0); $("#k-collateral").textContent=dollars(collateral);
  const totalPrem=state.positions.reduce((s,p)=>s+(Number(p.PremiumReceived)||0)*100*(Number(p.Quantity)||0),0); $("#k-premium").textContent=dollars(totalPrem);
  const realized=(state.journal||[]).reduce((s,j)=>s+(Number(j.realized)||0),0); $("#k-realized").textContent=dollars(realized); }
function compute(pos){ const collateral=calcCollateral(pos); const lastStock=pos["_lastStock"]??null; const lastOption=pos["_lastOption"]??null; const iv=pos["_iv"]??null; const delta=pos["_delta"]??null; const distPct=distanceToStrikePct(pos,lastStock);
  const badges=(state.alerts||[]).map(a=>{ if(distPct==null) return ``; if(distPct<=a.pct){ const tone=a.pct<=0.1?'danger':'warn'; return `<span class="badge ${tone}">${a.label} (${(a.pct*100).toFixed(0)}%)</span>`;} return ``; }).join('');
  const shorts=(pos.legs||[]).filter(l=>String(l.LegType).toLowerCase()==='short'); const soldSummary=shorts.length? shorts.map(l=>`${String(l.Side||'').toUpperCase()} ${l.Strike}`).join(', ') : (pos.ShortStrike? `${String(pos.Side||'').toUpperCase()} ${pos.ShortStrike}`:''); return {collateral,lastStock,lastOption,iv,delta,distPct,alertsBadges:badges,soldSummary}; }
function rowHTML(pos,idx,c){ const dte=daysTo(pos.Expiration); const distPctTxt=c.distPct!=null?(c.distPct*100).toFixed(1)+'%':''; const ivTxt=c.iv!=null?(c.iv*100).toFixed(1)+'%':''; const legsRows=(pos.legs||[]).map(l=>`<tr><td>${l.LegType}</td><td>${l.Side}</td><td>${l.Strike}</td><td>${dollars(l.Premium)}</td><td>${l.Qty||pos.Quantity||1}</td></tr>`).join('')||'<tr><td colspan="5"><em>No legs—add in Edit.</em></td></tr>'; const showRoll=(c.distPct!=null&&c.distPct<0.2);
  return `<tr>
  <td><button class="btn secondary" data-expand="${idx}">▸</button></td><td>${pos.Symbol||""}</td><td>${pos.Status||""}</td><td>${pos.Strategy||""}</td><td>${pos.Side||""}</td><td>${pos.Quantity||""}</td><td>${pos.ShortStrike||""}</td><td>${pos.LongStrike||""}</td><td>${pos.PremiumReceived||""}</td><td>${pos.PremiumUnrealized||""}</td><td>${pos.Expiration||""} ${dte!==''?`<span class="badge">${dte}d</span>`:''}</td><td>${pos.OpenDate||""}</td><td>${pos.CloseDate||""}</td><td>${dollars(c.collateral)}</td><td>${c.lastStock!=null?c.lastStock.toFixed(2):""}</td><td>${c.lastOption!=null?dollars(c.lastOption):""}</td><td>${c.delta!=null?c.delta.toFixed(3):""}</td><td>${ivTxt}</td><td>${distPctTxt}</td><td><div class="alert-badges">${c.alertsBadges}</div></td>
  <td class="row-actions"><button class="btn secondary" data-edit="${idx}">Edit</button>${showRoll?`<button class="btn" data-roll="${idx}">Roll Calc</button>`:''}<button class="btn warn" data-close="${idx}">Close</button><button class="btn danger" data-delete="${idx}">Delete</button></td></tr>
  <tr><td colspan="${COLUMNS.length}"><div class="details" id="details-${idx}" style="display:none"><div><strong>Sold:</strong> ${c.soldSummary}</div>
  <div><strong>Legs:</strong><table class="table"><thead><tr><th>Type</th><th>Side</th><th>Strike</th><th>Premium</th><th>Qty</th></tr></thead><tbody>${legsRows}</tbody></table></div>
  <div><strong>Notes:</strong> ${pos.Notes||''}</div><div class="flex"><span class="badge">Source: ${(getSettings().source||'yahoo').toUpperCase()}</span><span class="badge">Last refresh: ${pos["_ts"]? new Date(pos["_ts"]).toLocaleString(): '—'}</span></div></div></td></tr>`; }
function renderBody(){ const tbody=$("#grid tbody"); const search=$("#search").value.toLowerCase(); const status=$("#filter-status").value;
  let rows=state.positions.map((p,idx)=>({p,idx})).filter(x=>{ if(status&&String(x.p.Status)!==status) return false; const hay=[x.p.Symbol,x.p.Strategy,x.p.Side].map(v=>String(v||'').toLowerCase()).join(' '); if(search&&!hay.includes(search)) return false; return true; });
  const comps=new Map(rows.map(({p,idx})=>[idx,compute(p)])); if(sort.by){ rows.sort((a,b)=>{ const A=sortValue(sort.by,a.p,comps.get(a.idx)), B=sortValue(sort.by,b.p,comps.get(b.idx)); const na=Number(A), nb=Number(B); const cmp=(!Number.isNaN(na)&&!Number.isNaN(nb))?(na-nb):String(A).localeCompare(String(B),undefined,{numeric:true}); return sort.dir==='asc'?cmp:-cmp; }); }
  tbody.innerHTML=rows.map(({p,idx})=>rowHTML(p,idx,comps.get(idx))).join(''); $$("button[data-edit]").forEach(b=>b.addEventListener('click', onEdit)); $$("button[data-close]").forEach(b=>b.addEventListener('click', onClose)); $$("button[data-delete]").forEach(b=>b.addEventListener('click', onDelete)); $$("button[data-expand]").forEach(b=>b.addEventListener('click',(e)=>{ const i=Number(e.currentTarget.dataset.expand); const el=document.getElementById('details-'+i); el.style.display=el.style.display==='none'?'block':'none'; })); $$("button[data-roll]").forEach(b=>b.addEventListener('click',(e)=>openRoll(Number(e.currentTarget.dataset.roll)))); }
function onEdit(e){ const idx=Number(e.currentTarget.dataset.edit); openEditor(state.positions[idx], idx); }
function onDelete(e){ const idx=Number(e.currentTarget.dataset.delete); state.positions.splice(idx,1); save(); render(); }
function onClose(e){ const idx=Number(e.currentTarget.dataset.close); const p=state.positions[idx]; if(!p) return; const realized=Number(p.PremiumReceived||0)*100*(Number(p.Quantity)||0)-(Number(p["_lastOption"]||0)*100*(Number(p.Quantity)||0)); const note=prompt(`Enter journal note. Estimated realized P&L: ${dollars(realized)}`, p.Notes||""); p.Status='Closed'; p.CloseDate=new Date().toISOString().slice(0,10); const j={symbol:p.Symbol,strategy:p.Strategy,side:p.Side,quantity:p.Quantity,shortStrike:p.ShortStrike,longStrike:p.LongStrike,openDate:p.OpenDate,closeDate:p.CloseDate,realized:realized,note:note||""}; state.journal=state.journal||[]; state.journal.push(j); save(); render(); }
function openRoll(index){ const dlg=$("#roll"), form=$("#roll-form"), p=state.positions[index]; form.symbol.value=p.Symbol||''; form.expiration.value=p.Expiration||''; const width=Math.abs((Number(p.ShortStrike)||0)-(Number(p.LongStrike)||Number.NaN)); form.short.value=p.ShortStrike||''; form.width.value=Number.isFinite(width)?width:''; dlg.showModal();
  const recompute=()=>{ const target=Number(form.targetCredit.value)||0; const addDays=Number(form.dteAdd.value)||0; const widthCh=Number(form.widthChange.value)||0; const newWidth=(Number(form.width.value)||0)+widthCh; const oldExp=new Date(p.Expiration); const newExp=new Date(oldExp.getTime()+addDays*86400000); const spot=p["_lastStock"]; const shortK=Number(p.ShortStrike)||0; const severity=(distanceToStrikePct(p,spot) ?? 1); const shift=spot? Math.round((0.05*spot)*(0.2/Math.max(0.01,severity))):0; const newShort=(String(p.Side).toLowerCase()==='put')?Math.max(1,shortK-shift):(shortK+shift);
    document.getElementById('roll-output').innerHTML=`<strong>${form.rollType.value}</strong><br/>New Exp: ${newExp.toISOString().slice(0,10)} | New Short Strike: ${newShort} | New Width: ${newWidth||'unchanged'}<br/>Target Credit: ${dollars(target)} (estimate)`; };
  form.targetCredit.oninput=recompute; form.dteAdd.oninput=recompute; form.widthChange.oninput=recompute; form.rollType.onchange=recompute; recompute();
  $("#btn-roll-apply").onclick=()=>{ dlg.close(); alert("Roll plan saved (not executed). Use Edit to implement."); }; }
$("#btn-refresh").addEventListener('click', refreshAll); $("#refresh-seconds").addEventListener('change', setupTimer);
function setupTimer(){ const sec=Number($("#refresh-seconds").value); if(autoTimer){clearInterval(autoTimer); autoTimer=null;} if(sec>0){ autoTimer=setInterval(refreshAll, sec*1000);} }
async function refreshAll(){ for(const p of state.positions){ if(!p.Symbol) continue; const q=await fetchQuote(p.Symbol); if(q&&q.price!=null){ p["_lastStock"]=q.price; p["_ts"]=q.ts; } const shortLeg=(p.legs||[]).find(l=>String(l.LegType).toLowerCase()==='short')||null; const strike=Number(p.ShortStrike||shortLeg?.Strike); const type=String(p.Side||shortLeg?.Side||'put').toLowerCase()==='call'?'call':'put'; if(p.Expiration&&strike){ const oc=await fetchOptionContract(p.Symbol,p.Expiration,strike,type); if(oc){ p["_lastOption"]=oc.last??null; p["_iv"]=typeof oc.iv==='number'?Math.abs(oc.iv):null; if(q&&p["_iv"]!=null){ const exp=new Date(p.Expiration); const tYears=Math.max(0,(exp - new Date())/31557600000); p["_delta"]=bsDelta(q.price,strike,tYears,0.01,p["_iv"],type==='call'); } } } } save(); render(); }
function save(){ saveState(state); }
function boot(){ if(!state.positions||state.positions.length===0){ fetch("./sample_positions_legs.csv").then(r=>r.text()).then(text=>{ const parsed=Papa.parse(text,{header:true}).data; state.positions=parsePositionsFromCsv(parsed); save(); render(); refreshAll(); setupTimer(); }); } else { render(); refreshAll(); setupTimer(); } }
boot();
