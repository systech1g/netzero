import { loadState, saveState, dollars, daysTo, distanceToStrikePct, isITM, fetchQuote } from './shared.js';
let state=loadState(); const $=(s)=>document.querySelector(s);
function kpis(){ const totalCredit=state.positions.reduce((s,p)=> s+(Number(p.PremiumReceived)||0)*100*(Number(p.Quantity)||0),0); const unreal=state.positions.reduce((s,p)=> s+(Number(p.PremiumUnrealized)||0),0); const realized=(state.journal||[]).reduce((s,j)=> s+(Number(j.realized)||0),0); $("#k-credit").textContent=dollars(totalCredit); $("#k-unrealized").textContent=dollars(unreal); $("#k-realized").textContent=dollars(realized); const open=state.positions.filter(p=>p.Status==='Open').length; $("#k-counts").textContent=`${open} open`; }
async function ensureQuotes(){ let changed=false; for(const p of state.positions){ if(p["_lastStock"]==null && p.Symbol){ const q=await fetchQuote(p.Symbol); if(q&&q.price!=null){ p["_lastStock"]=q.price; p["_ts"]=q.ts; changed=true; } } } if(changed){ saveState(state); } }
function charts(){ let itm=0, otm=0; for(const p of state.positions){ const stock=p["_lastStock"]; if(stock==null) continue; if((()=>{ const side=String(p.Side||'').toLowerCase() || String((p.legs||[]).find(l=>String(l.LegType).toLowerCase()==='short')?.Side||'').toLowerCase(); const k=Number(p.ShortStrike || (p.legs||[]).find(l=>String(l.LegType).toLowerCase()==='short')?.Strike); if(!k||stock==null) return false; if(side==='put') return stock<k; if(side==='call') return stock>k; return false; })()) itm++; else otm++; } const ctx=document.getElementById('pieITM'); new Chart(ctx,{ type:'doughnut', data:{ labels:['ITM','OTM'], datasets:[{ data:[itm,otm], backgroundColor:['#ef4444','#3b82f6'] }] }, options:{ plugins:{ legend:{ position:'bottom' } } } }); }
function upcoming(){ const tb=document.querySelector('#upcoming tbody'); const list=state.positions.filter(p=>p.Status==='Open'&&p.Expiration).map(p=>{ const stock=p["_lastStock"]; const dte=daysTo(p.Expiration); const distPct=distanceToStrikePct(p,stock); const distD=(stock!=null&&p.ShortStrike)? (Number(stock)-Number(p.ShortStrike)) : null; return { Symbol:p.Symbol, Expiration:p.Expiration, DTE:dte, Strategy:p.Strategy, dD:distD, dPct:distPct }; }).sort((a,b)=>(a.DTE??999)-(b.DTE??999)).slice(0,100);
  tb.innerHTML=list.map(x=>`<tr><td>${x.Symbol||''}</td><td>${x.Expiration||''}</td><td>${x.DTE==null?'':x.DTE}</td><td>${x.Strategy||''}</td><td>${x.dD==null?'':x.dD.toFixed(2)}</td><td>${x.dPct==null?'':(x.dPct*100).toFixed(1)+'%'}</td></tr>`).join(''); }
(async function init(){ await ensureQuotes(); state=loadState(); kpis(); charts(); upcoming(); })();
